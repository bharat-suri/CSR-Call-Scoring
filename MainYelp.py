# -*- coding: utf-8 -*-
"""MainYelp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dFLbHKGo2FvujqwKvJuMA2ff5xpM0ixl
"""

from DatasetClasses import YelpDataset
from torch.utils.data import DataLoader
from gensim.models.keyedvectors import Word2VecKeyedVectors
from DataLoader_fns import save_vocab
import numpy as np
import torch
from Models import EncoderRNN, BinaryClassifier
from TrainModel import train_model
from DataLoader_fns import collate
from Inference_fns import get_accuracy

dataset_train = YelpDataset('dataset_train.json')
dataset_dev = YelpDataset('dataset_dev.json')
dataset_test = YelpDataset('dataset_test.json')

vocab = dataset_train.get_vocab()
save_vocab(vocab, 'vocab')


batch_size = 5

dataloader_train = DataLoader(dataset_train, batch_size=batch_size, shuffle=True, 
                              num_workers=0, collate_fn = collate)
dataloader_dev = DataLoader(dataset_dev, batch_size=batch_size, shuffle=True, 
                              num_workers=0, collate_fn = collate)
dataloader_test = DataLoader(dataset_test, batch_size=batch_size, shuffle=True, 
                              num_workers=0, collate_fn = collate)

glove = Word2VecKeyedVectors.load_word2vec_format('glove.w2v.txt')
vec_size = 300
vocab_size = len(vocab)

weights_matrix = np.zeros((vocab_size, vec_size))
i = 0
for word in vocab.itos:
  try:
    weights_matrix[i] = glove[word]
  except KeyError:
    weights_matrix[i] = np.random.normal(scale=0.6, size=(vec_size, ))
  i+=1
  
weights_matrix = torch.tensor(weights_matrix)

encoder_output_size = 32
encoder = EncoderRNN(vocab_size, vec_size, encoder_output_size, weights_matrix)
classifier = BinaryClassifier(encoder_output_size)

encoder, classifier = train_model(dataloader_train, encoder, classifier)

test_acc = get_accuracy(dataloader_test, encoder, classifier)
print('Test accuracy for Yelp dataset is {}'.format(test_acc))

torch.save(encoder, "encoder_yelp.model")
torch.save(classifier, "classifier_yelp.model")